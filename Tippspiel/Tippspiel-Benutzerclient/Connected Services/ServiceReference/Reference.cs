//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tippspiel_Benutzerclient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BetMessage", Namespace="http://schemas.datacontract.org/2004/07/Tippspiel_Server.Sources.Service.Models")]
    [System.SerializableAttribute()]
    public partial class BetMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AwayTeamScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BettorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HomeTeamScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AwayTeamScore {
            get {
                return this.AwayTeamScoreField;
            }
            set {
                if ((this.AwayTeamScoreField.Equals(value) != true)) {
                    this.AwayTeamScoreField = value;
                    this.RaisePropertyChanged("AwayTeamScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BettorId {
            get {
                return this.BettorIdField;
            }
            set {
                if ((this.BettorIdField.Equals(value) != true)) {
                    this.BettorIdField = value;
                    this.RaisePropertyChanged("BettorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HomeTeamScore {
            get {
                return this.HomeTeamScoreField;
            }
            set {
                if ((this.HomeTeamScoreField.Equals(value) != true)) {
                    this.HomeTeamScoreField = value;
                    this.RaisePropertyChanged("HomeTeamScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchId {
            get {
                return this.MatchIdField;
            }
            set {
                if ((this.MatchIdField.Equals(value) != true)) {
                    this.MatchIdField = value;
                    this.RaisePropertyChanged("MatchId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BettorMessage", Namespace="http://schemas.datacontract.org/2004/07/Tippspiel_Server.Sources.Service.Models")]
    [System.SerializableAttribute()]
    public partial class BettorMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MatchMessage", Namespace="http://schemas.datacontract.org/2004/07/Tippspiel_Server.Sources.Service.Models")]
    [System.SerializableAttribute()]
    public partial class MatchMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AwayTeamIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AwayTeamScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HomeTeamIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HomeTeamScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchDayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeasonIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AwayTeamId {
            get {
                return this.AwayTeamIdField;
            }
            set {
                if ((this.AwayTeamIdField.Equals(value) != true)) {
                    this.AwayTeamIdField = value;
                    this.RaisePropertyChanged("AwayTeamId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AwayTeamScore {
            get {
                return this.AwayTeamScoreField;
            }
            set {
                if ((this.AwayTeamScoreField.Equals(value) != true)) {
                    this.AwayTeamScoreField = value;
                    this.RaisePropertyChanged("AwayTeamScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HomeTeamId {
            get {
                return this.HomeTeamIdField;
            }
            set {
                if ((this.HomeTeamIdField.Equals(value) != true)) {
                    this.HomeTeamIdField = value;
                    this.RaisePropertyChanged("HomeTeamId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HomeTeamScore {
            get {
                return this.HomeTeamScoreField;
            }
            set {
                if ((this.HomeTeamScoreField.Equals(value) != true)) {
                    this.HomeTeamScoreField = value;
                    this.RaisePropertyChanged("HomeTeamScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchDay {
            get {
                return this.MatchDayField;
            }
            set {
                if ((this.MatchDayField.Equals(value) != true)) {
                    this.MatchDayField = value;
                    this.RaisePropertyChanged("MatchDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SeasonId {
            get {
                return this.SeasonIdField;
            }
            set {
                if ((this.SeasonIdField.Equals(value) != true)) {
                    this.SeasonIdField = value;
                    this.RaisePropertyChanged("SeasonId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SeasonMessage", Namespace="http://schemas.datacontract.org/2004/07/Tippspiel_Server.Sources.Service.Models")]
    [System.SerializableAttribute()]
    public partial class SeasonMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SequenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] TeamIdsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sequence {
            get {
                return this.SequenceField;
            }
            set {
                if ((this.SequenceField.Equals(value) != true)) {
                    this.SequenceField = value;
                    this.RaisePropertyChanged("Sequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] TeamIds {
            get {
                return this.TeamIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamIdsField, value) != true)) {
                    this.TeamIdsField = value;
                    this.RaisePropertyChanged("TeamIds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TeamMessage", Namespace="http://schemas.datacontract.org/2004/07/Tippspiel_Server.Sources.Service.Models")]
    [System.SerializableAttribute()]
    public partial class TeamMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] SeasonIDsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] SeasonIDs {
            get {
                return this.SeasonIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.SeasonIDsField, value) != true)) {
                    this.SeasonIDsField = value;
                    this.RaisePropertyChanged("SeasonIDs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Ping", ReplyAction="http://tempuri.org/IService/PingResponse")]
        string Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Ping", ReplyAction="http://tempuri.org/IService/PingResponse")]
        System.Threading.Tasks.Task<string> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBets", ReplyAction="http://tempuri.org/IService/GetAllBetsResponse")]
        Tippspiel_Benutzerclient.ServiceReference.BetMessage[] GetAllBets(int bettorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBets", ReplyAction="http://tempuri.org/IService/GetAllBetsResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.BetMessage[]> GetAllBetsAsync(int bettorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateBet", ReplyAction="http://tempuri.org/IService/CreateBetResponse")]
        string CreateBet(Tippspiel_Benutzerclient.ServiceReference.BetMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateBet", ReplyAction="http://tempuri.org/IService/CreateBetResponse")]
        System.Threading.Tasks.Task<string> CreateBetAsync(Tippspiel_Benutzerclient.ServiceReference.BetMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditBet", ReplyAction="http://tempuri.org/IService/EditBetResponse")]
        string EditBet(Tippspiel_Benutzerclient.ServiceReference.BetMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditBet", ReplyAction="http://tempuri.org/IService/EditBetResponse")]
        System.Threading.Tasks.Task<string> EditBetAsync(Tippspiel_Benutzerclient.ServiceReference.BetMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBet", ReplyAction="http://tempuri.org/IService/DeleteBetResponse")]
        string DeleteBet(Tippspiel_Benutzerclient.ServiceReference.BetMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBet", ReplyAction="http://tempuri.org/IService/DeleteBetResponse")]
        System.Threading.Tasks.Task<string> DeleteBetAsync(Tippspiel_Benutzerclient.ServiceReference.BetMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBettors", ReplyAction="http://tempuri.org/IService/GetAllBettorsResponse")]
        Tippspiel_Benutzerclient.ServiceReference.BettorMessage[] GetAllBettors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBettors", ReplyAction="http://tempuri.org/IService/GetAllBettorsResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.BettorMessage[]> GetAllBettorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateBettor", ReplyAction="http://tempuri.org/IService/CreateBettorResponse")]
        string CreateBettor(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateBettor", ReplyAction="http://tempuri.org/IService/CreateBettorResponse")]
        System.Threading.Tasks.Task<string> CreateBettorAsync(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditBettor", ReplyAction="http://tempuri.org/IService/EditBettorResponse")]
        string EditBettor(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditBettor", ReplyAction="http://tempuri.org/IService/EditBettorResponse")]
        System.Threading.Tasks.Task<string> EditBettorAsync(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBettor", ReplyAction="http://tempuri.org/IService/DeleteBettorResponse")]
        string DeleteBettor(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBettor", ReplyAction="http://tempuri.org/IService/DeleteBettorResponse")]
        System.Threading.Tasks.Task<string> DeleteBettorAsync(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMatches", ReplyAction="http://tempuri.org/IService/GetAllMatchesResponse")]
        Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] GetAllMatches();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMatches", ReplyAction="http://tempuri.org/IService/GetAllMatchesResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.MatchMessage[]> GetAllMatchesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMatchesForMatchDayInSeason", ReplyAction="http://tempuri.org/IService/GetAllMatchesForMatchDayInSeasonResponse")]
        Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] GetAllMatchesForMatchDayInSeason(int seasonId, int matchDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMatchesForMatchDayInSeason", ReplyAction="http://tempuri.org/IService/GetAllMatchesForMatchDayInSeasonResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.MatchMessage[]> GetAllMatchesForMatchDayInSeasonAsync(int seasonId, int matchDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateMatch", ReplyAction="http://tempuri.org/IService/CreateMatchResponse")]
        string CreateMatch(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateMatch", ReplyAction="http://tempuri.org/IService/CreateMatchResponse")]
        System.Threading.Tasks.Task<string> CreateMatchAsync(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditMatch", ReplyAction="http://tempuri.org/IService/EditMatchResponse")]
        string EditMatch(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditMatch", ReplyAction="http://tempuri.org/IService/EditMatchResponse")]
        System.Threading.Tasks.Task<string> EditMatchAsync(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteMatch", ReplyAction="http://tempuri.org/IService/DeleteMatchResponse")]
        string DeleteMatch(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteMatch", ReplyAction="http://tempuri.org/IService/DeleteMatchResponse")]
        System.Threading.Tasks.Task<string> DeleteMatchAsync(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSeasons", ReplyAction="http://tempuri.org/IService/GetAllSeasonsResponse")]
        Tippspiel_Benutzerclient.ServiceReference.SeasonMessage[] GetAllSeasons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSeasons", ReplyAction="http://tempuri.org/IService/GetAllSeasonsResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.SeasonMessage[]> GetAllSeasonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateSeason", ReplyAction="http://tempuri.org/IService/CreateSeasonResponse")]
        string CreateSeason(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateSeason", ReplyAction="http://tempuri.org/IService/CreateSeasonResponse")]
        System.Threading.Tasks.Task<string> CreateSeasonAsync(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditSeason", ReplyAction="http://tempuri.org/IService/EditSeasonResponse")]
        string EditSeason(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditSeason", ReplyAction="http://tempuri.org/IService/EditSeasonResponse")]
        System.Threading.Tasks.Task<string> EditSeasonAsync(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteSeason", ReplyAction="http://tempuri.org/IService/DeleteSeasonResponse")]
        string DeleteSeason(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteSeason", ReplyAction="http://tempuri.org/IService/DeleteSeasonResponse")]
        System.Threading.Tasks.Task<string> DeleteSeasonAsync(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTeams", ReplyAction="http://tempuri.org/IService/GetAllTeamsResponse")]
        Tippspiel_Benutzerclient.ServiceReference.TeamMessage[] GetAllTeams();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTeams", ReplyAction="http://tempuri.org/IService/GetAllTeamsResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.TeamMessage[]> GetAllTeamsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateTeam", ReplyAction="http://tempuri.org/IService/CreateTeamResponse")]
        string CreateTeam(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateTeam", ReplyAction="http://tempuri.org/IService/CreateTeamResponse")]
        System.Threading.Tasks.Task<string> CreateTeamAsync(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditTeam", ReplyAction="http://tempuri.org/IService/EditTeamResponse")]
        string EditTeam(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EditTeam", ReplyAction="http://tempuri.org/IService/EditTeamResponse")]
        System.Threading.Tasks.Task<string> EditTeamAsync(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteTeam", ReplyAction="http://tempuri.org/IService/DeleteTeamResponse")]
        string DeleteTeam(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteTeam", ReplyAction="http://tempuri.org/IService/DeleteTeamResponse")]
        System.Threading.Tasks.Task<string> DeleteTeamAsync(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSeasonsById", ReplyAction="http://tempuri.org/IService/GetSeasonsByIdResponse")]
        Tippspiel_Benutzerclient.ServiceReference.SeasonMessage[] GetSeasonsById(int[] seasonIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSeasonsById", ReplyAction="http://tempuri.org/IService/GetSeasonsByIdResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.SeasonMessage[]> GetSeasonsByIdAsync(int[] seasonIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeamsById", ReplyAction="http://tempuri.org/IService/GetTeamsByIdResponse")]
        Tippspiel_Benutzerclient.ServiceReference.TeamMessage[] GetTeamsById(int[] teamIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeamsById", ReplyAction="http://tempuri.org/IService/GetTeamsByIdResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.TeamMessage[]> GetTeamsByIdAsync(int[] teamIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeamByName", ReplyAction="http://tempuri.org/IService/GetTeamByNameResponse")]
        Tippspiel_Benutzerclient.ServiceReference.TeamMessage[] GetTeamByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTeamByName", ReplyAction="http://tempuri.org/IService/GetTeamByNameResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.TeamMessage[]> GetTeamByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMatchesById", ReplyAction="http://tempuri.org/IService/GetMatchesByIdResponse")]
        Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] GetMatchesById(int[] matchIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMatchesById", ReplyAction="http://tempuri.org/IService/GetMatchesByIdResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.MatchMessage[]> GetMatchesByIdAsync(int[] matchIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMatchesForSeason", ReplyAction="http://tempuri.org/IService/GetMatchesForSeasonResponse")]
        Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] GetMatchesForSeason(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMatchesForSeason", ReplyAction="http://tempuri.org/IService/GetMatchesForSeasonResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.MatchMessage[]> GetMatchesForSeasonAsync(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateMatches", ReplyAction="http://tempuri.org/IService/CreateMatchesResponse")]
        string CreateMatches(Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] matches);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateMatches", ReplyAction="http://tempuri.org/IService/CreateMatchesResponse")]
        System.Threading.Tasks.Task<string> CreateMatchesAsync(Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] matches);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTeamsForSeason", ReplyAction="http://tempuri.org/IService/GetAllTeamsForSeasonResponse")]
        Tippspiel_Benutzerclient.ServiceReference.TeamMessage[] GetAllTeamsForSeason(int seasonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTeamsForSeason", ReplyAction="http://tempuri.org/IService/GetAllTeamsForSeasonResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.TeamMessage[]> GetAllTeamsForSeasonAsync(int seasonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMatchesForSeason", ReplyAction="http://tempuri.org/IService/GetAllMatchesForSeasonResponse")]
        Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] GetAllMatchesForSeason(int seasonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllMatchesForSeason", ReplyAction="http://tempuri.org/IService/GetAllMatchesForSeasonResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.MatchMessage[]> GetAllMatchesForSeasonAsync(int seasonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBetsForSeason", ReplyAction="http://tempuri.org/IService/GetAllBetsForSeasonResponse")]
        Tippspiel_Benutzerclient.ServiceReference.BetMessage[] GetAllBetsForSeason(int seasonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBetsForSeason", ReplyAction="http://tempuri.org/IService/GetAllBetsForSeasonResponse")]
        System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.BetMessage[]> GetAllBetsForSeasonAsync(int seasonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateOrCreateBetsForSeason", ReplyAction="http://tempuri.org/IService/UpdateOrCreateBetsForSeasonResponse")]
        string UpdateOrCreateBetsForSeason(int seasonId, Tippspiel_Benutzerclient.ServiceReference.BetMessage[] bets);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateOrCreateBetsForSeason", ReplyAction="http://tempuri.org/IService/UpdateOrCreateBetsForSeasonResponse")]
        System.Threading.Tasks.Task<string> UpdateOrCreateBetsForSeasonAsync(int seasonId, Tippspiel_Benutzerclient.ServiceReference.BetMessage[] bets);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Tippspiel_Benutzerclient.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Tippspiel_Benutzerclient.ServiceReference.IService>, Tippspiel_Benutzerclient.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<string> PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.BetMessage[] GetAllBets(int bettorId) {
            return base.Channel.GetAllBets(bettorId);
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.BetMessage[]> GetAllBetsAsync(int bettorId) {
            return base.Channel.GetAllBetsAsync(bettorId);
        }
        
        public string CreateBet(Tippspiel_Benutzerclient.ServiceReference.BetMessage b) {
            return base.Channel.CreateBet(b);
        }
        
        public System.Threading.Tasks.Task<string> CreateBetAsync(Tippspiel_Benutzerclient.ServiceReference.BetMessage b) {
            return base.Channel.CreateBetAsync(b);
        }
        
        public string EditBet(Tippspiel_Benutzerclient.ServiceReference.BetMessage b) {
            return base.Channel.EditBet(b);
        }
        
        public System.Threading.Tasks.Task<string> EditBetAsync(Tippspiel_Benutzerclient.ServiceReference.BetMessage b) {
            return base.Channel.EditBetAsync(b);
        }
        
        public string DeleteBet(Tippspiel_Benutzerclient.ServiceReference.BetMessage b) {
            return base.Channel.DeleteBet(b);
        }
        
        public System.Threading.Tasks.Task<string> DeleteBetAsync(Tippspiel_Benutzerclient.ServiceReference.BetMessage b) {
            return base.Channel.DeleteBetAsync(b);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.BettorMessage[] GetAllBettors() {
            return base.Channel.GetAllBettors();
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.BettorMessage[]> GetAllBettorsAsync() {
            return base.Channel.GetAllBettorsAsync();
        }
        
        public string CreateBettor(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b) {
            return base.Channel.CreateBettor(b);
        }
        
        public System.Threading.Tasks.Task<string> CreateBettorAsync(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b) {
            return base.Channel.CreateBettorAsync(b);
        }
        
        public string EditBettor(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b) {
            return base.Channel.EditBettor(b);
        }
        
        public System.Threading.Tasks.Task<string> EditBettorAsync(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b) {
            return base.Channel.EditBettorAsync(b);
        }
        
        public string DeleteBettor(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b) {
            return base.Channel.DeleteBettor(b);
        }
        
        public System.Threading.Tasks.Task<string> DeleteBettorAsync(Tippspiel_Benutzerclient.ServiceReference.BettorMessage b) {
            return base.Channel.DeleteBettorAsync(b);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] GetAllMatches() {
            return base.Channel.GetAllMatches();
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.MatchMessage[]> GetAllMatchesAsync() {
            return base.Channel.GetAllMatchesAsync();
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] GetAllMatchesForMatchDayInSeason(int seasonId, int matchDay) {
            return base.Channel.GetAllMatchesForMatchDayInSeason(seasonId, matchDay);
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.MatchMessage[]> GetAllMatchesForMatchDayInSeasonAsync(int seasonId, int matchDay) {
            return base.Channel.GetAllMatchesForMatchDayInSeasonAsync(seasonId, matchDay);
        }
        
        public string CreateMatch(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m) {
            return base.Channel.CreateMatch(m);
        }
        
        public System.Threading.Tasks.Task<string> CreateMatchAsync(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m) {
            return base.Channel.CreateMatchAsync(m);
        }
        
        public string EditMatch(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m) {
            return base.Channel.EditMatch(m);
        }
        
        public System.Threading.Tasks.Task<string> EditMatchAsync(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m) {
            return base.Channel.EditMatchAsync(m);
        }
        
        public string DeleteMatch(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m) {
            return base.Channel.DeleteMatch(m);
        }
        
        public System.Threading.Tasks.Task<string> DeleteMatchAsync(Tippspiel_Benutzerclient.ServiceReference.MatchMessage m) {
            return base.Channel.DeleteMatchAsync(m);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.SeasonMessage[] GetAllSeasons() {
            return base.Channel.GetAllSeasons();
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.SeasonMessage[]> GetAllSeasonsAsync() {
            return base.Channel.GetAllSeasonsAsync();
        }
        
        public string CreateSeason(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s) {
            return base.Channel.CreateSeason(s);
        }
        
        public System.Threading.Tasks.Task<string> CreateSeasonAsync(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s) {
            return base.Channel.CreateSeasonAsync(s);
        }
        
        public string EditSeason(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s) {
            return base.Channel.EditSeason(s);
        }
        
        public System.Threading.Tasks.Task<string> EditSeasonAsync(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s) {
            return base.Channel.EditSeasonAsync(s);
        }
        
        public string DeleteSeason(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s) {
            return base.Channel.DeleteSeason(s);
        }
        
        public System.Threading.Tasks.Task<string> DeleteSeasonAsync(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage s) {
            return base.Channel.DeleteSeasonAsync(s);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.TeamMessage[] GetAllTeams() {
            return base.Channel.GetAllTeams();
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.TeamMessage[]> GetAllTeamsAsync() {
            return base.Channel.GetAllTeamsAsync();
        }
        
        public string CreateTeam(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t) {
            return base.Channel.CreateTeam(t);
        }
        
        public System.Threading.Tasks.Task<string> CreateTeamAsync(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t) {
            return base.Channel.CreateTeamAsync(t);
        }
        
        public string EditTeam(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t) {
            return base.Channel.EditTeam(t);
        }
        
        public System.Threading.Tasks.Task<string> EditTeamAsync(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t) {
            return base.Channel.EditTeamAsync(t);
        }
        
        public string DeleteTeam(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t) {
            return base.Channel.DeleteTeam(t);
        }
        
        public System.Threading.Tasks.Task<string> DeleteTeamAsync(Tippspiel_Benutzerclient.ServiceReference.TeamMessage t) {
            return base.Channel.DeleteTeamAsync(t);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.SeasonMessage[] GetSeasonsById(int[] seasonIds) {
            return base.Channel.GetSeasonsById(seasonIds);
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.SeasonMessage[]> GetSeasonsByIdAsync(int[] seasonIds) {
            return base.Channel.GetSeasonsByIdAsync(seasonIds);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.TeamMessage[] GetTeamsById(int[] teamIds) {
            return base.Channel.GetTeamsById(teamIds);
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.TeamMessage[]> GetTeamsByIdAsync(int[] teamIds) {
            return base.Channel.GetTeamsByIdAsync(teamIds);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.TeamMessage[] GetTeamByName(string name) {
            return base.Channel.GetTeamByName(name);
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.TeamMessage[]> GetTeamByNameAsync(string name) {
            return base.Channel.GetTeamByNameAsync(name);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] GetMatchesById(int[] matchIds) {
            return base.Channel.GetMatchesById(matchIds);
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.MatchMessage[]> GetMatchesByIdAsync(int[] matchIds) {
            return base.Channel.GetMatchesByIdAsync(matchIds);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] GetMatchesForSeason(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage season) {
            return base.Channel.GetMatchesForSeason(season);
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.MatchMessage[]> GetMatchesForSeasonAsync(Tippspiel_Benutzerclient.ServiceReference.SeasonMessage season) {
            return base.Channel.GetMatchesForSeasonAsync(season);
        }
        
        public string CreateMatches(Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] matches) {
            return base.Channel.CreateMatches(matches);
        }
        
        public System.Threading.Tasks.Task<string> CreateMatchesAsync(Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] matches) {
            return base.Channel.CreateMatchesAsync(matches);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.TeamMessage[] GetAllTeamsForSeason(int seasonId) {
            return base.Channel.GetAllTeamsForSeason(seasonId);
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.TeamMessage[]> GetAllTeamsForSeasonAsync(int seasonId) {
            return base.Channel.GetAllTeamsForSeasonAsync(seasonId);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.MatchMessage[] GetAllMatchesForSeason(int seasonId) {
            return base.Channel.GetAllMatchesForSeason(seasonId);
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.MatchMessage[]> GetAllMatchesForSeasonAsync(int seasonId) {
            return base.Channel.GetAllMatchesForSeasonAsync(seasonId);
        }
        
        public Tippspiel_Benutzerclient.ServiceReference.BetMessage[] GetAllBetsForSeason(int seasonId) {
            return base.Channel.GetAllBetsForSeason(seasonId);
        }
        
        public System.Threading.Tasks.Task<Tippspiel_Benutzerclient.ServiceReference.BetMessage[]> GetAllBetsForSeasonAsync(int seasonId) {
            return base.Channel.GetAllBetsForSeasonAsync(seasonId);
        }
        
        public string UpdateOrCreateBetsForSeason(int seasonId, Tippspiel_Benutzerclient.ServiceReference.BetMessage[] bets) {
            return base.Channel.UpdateOrCreateBetsForSeason(seasonId, bets);
        }
        
        public System.Threading.Tasks.Task<string> UpdateOrCreateBetsForSeasonAsync(int seasonId, Tippspiel_Benutzerclient.ServiceReference.BetMessage[] bets) {
            return base.Channel.UpdateOrCreateBetsForSeasonAsync(seasonId, bets);
        }
    }
}
